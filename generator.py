import os, re, random, subprocess

template_dir = "./templates/"
build_dir = "./build/"
try: os.mkdir("build")
except: print("dir already exists")
subprocess.run(['cp', 'style.css', './build/'])
files: list[str] = os.listdir(template_dir)
temp_first: str = ""
temp_last: str = ""
with open(template_dir + "template.html", "r") as file:
    toggle: bool = True
    for line in file:
        if toggle:
            temp_first += line
            if "stylesheet" in line:
                temp_first += (
                    '<link rel="stylesheet" href="style.css?v='
                    + str(random.randint(0, 99999))
                    + '">'
                )
                # prevent stylesheet from getting cached
        else:
            temp_last += line
        if "main-content" in line:
            toggle = False


def find_text_between_delimiters(text: str) -> list[str]:
    # This regex will find all occurrences of text between ::
    pattern = r"::(.*?)::"
    matches = re.findall(pattern, text)
    return matches


def process_template(filename: str):
    html_string: str = "<!-- GENERATED BY generator.py -->"
    html_string += temp_first
    flags = [False]
    data: object = []
    with open(template_dir + filename, "r") as file:
        for line in file:
            if flags[0] is False:
                html_string += line
            if "file::" in line and 'class="block-head"' in line:
                # insert files between file::<filename>:: if its specified in a div called codehead
                html_string += "<pre><code>"
                path: str = find_text_between_delimiters(line)[0]
                max_lines: int = -1
                if "[" in line:
                    first = line.index("[") + 1
                    second = line.index("]")
                    max_lines = int(line[first:second])
                with open(path, "r") as file2:
                    for l in file2:
                        html_string += l.replace("<", "&lt;").replace(">", "&gt;")
                        # replace <,> to be able to see html tags in literal files
                        max_lines -= 1
                        if max_lines == 0:
                            html_string += "...\nfile truncated"
                            break
                html_string += "</code></pre>"
            elif "END_SORTED_HEAD:" in line:
                # this is starting to turn into a worse version of emacs org mode
                flags[0] = False
                data.sort()
                for l in data:
                    html_string += l
                html_string += line
            elif (
                flags[0] is True
                or "BEGIN_SORTED_HEAD:" in line
                and 'class="block-head"' in line
            ):
                flags[0] = True
                if 'class="sorted-element"' in line:
                    data.append(line)
                elif "BEGIN_SORTED_HEAD:" in line:
                    continue
                else:
                    data[-1] += line
    html_string += temp_last

    with open(build_dir + filename[:-6] + "html", "w") as file:
        file.write(html_string)


for file_ in files:
    if ".t.html" in file_:
        process_template(file_)
