import os, re, random, json

template_dir = "./templates/"
files: list[str] = os.listdir(template_dir)
temp_first: str = ""
temp_last: str = ""
with open(template_dir + "template.html", "r") as file:
    toggle: bool = True
    for line in file:
        if toggle:
            temp_first += line
            if "stylesheet" in line:
                temp_first += (
                    '<link rel="stylesheet" href="style.css?v='
                    + str(random.randint(0, 99999))
                    + '">'
                )
                # prevent stylesheet from getting cached
        else:
            temp_last += line
        if "main-content" in line:
            toggle = False


def find_text_between_delimiters(text: str) -> list[str]:
    # This regex will find all occurrences of text between ::
    pattern = r"::(.*?)(?=::)"
    matches = re.findall(pattern, text)
    return matches

data: dict[str, list[str]] = {}
flags = [False]
def handle_macros(line: str, flags: list[bool]):
    html_string: str = ""

    if ">file::" in line:
        # insert files between file::<filename>:: if its specified in a div called codehead
        html_string += "<pre><code>"
        args = find_text_between_delimiters(line)
        path: str = args[0]
        max_lines: int = -1
        if len(args) > 1:
            max_lines = int(args[1])
        with open(path, "r") as file2:
            for l in file2:
                html_string += l.replace("<", "&lt;").replace(">", "&gt;")
                # replace <,> to be able to see html tags in literal files
                max_lines -= 1
                if max_lines == 0:
                    html_string += "...\nfile truncated"
                    break
        html_string += "</code></pre>"

    elif ">sorted::end::" in line and flags[0] is True:
        # this is starting to turn into a worse version of emacs org mode
        flags[0] = False
        data["el"].sort()
        if len(data["custom"]) > 0:
            try:
                json_data = json.loads("{" + data["custom"][0] + "}")
            except:
                raise RuntimeError("Bad json")
            _list: list[str] = data["el"] # use _list in the sort command
            eval(json_data["sort-command"])
        for l in data["el"]:
            html_string += l
        data.clear()
        html_string += line
    elif flags[0] is True or ">sorted::begin::" in line:
        flags[0] = True
        if 'class="sorted-element"' in line:
            data["el"].append(line)
        elif ">sorted::begin::" in line:
            if len(data) > 0:
                raise RuntimeError("Data already in use")
            data["el"] = []
            data["custom"] = []
            args = find_text_between_delimiters(line)
            if len(args) == 2:
                data["custom"].append(args[1])
            return html_string
        else:
            data["el"][-1] += line

    return html_string

def process_template(filename: str):
    html_string: str = "<!-- GENERATED BY generator.py -->"
    html_string += temp_first
    with open(template_dir + filename, "r") as file:
        for line in file:
            if sum(flags) == 0: # all falses
                html_string += line
            elif sum(flags) > 1:
                raise RuntimeError("Bad flags")
            if sum(flags) == 1 or 'class="block-head"' in line:
                html_string += handle_macros(line, flags)
    html_string += temp_last
    with open(filename[:-6] + "html", "w") as file:
        file.write(html_string)


for file_ in files:
    if ".t.html" in file_:
        process_template(file_)
